{"ast":null,"code":"var _jsxFileName = \"/home/lorismilloni/Repos/top_trumps/src/App.js\";\nimport React from 'react';\nimport Form from './components/Form';\nimport Card from './components/Card';\nimport Filter from './components/Filter';\nimport FilterList from './components/FilterList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleSaveButton = () => {\n      let isValid = true;\n      const MAX_SUM = 210;\n      const MAX_VALUE = 90;\n      const MIN_VALUE = 0;\n      const {\n        cardAttr1,\n        cardAttr2,\n        cardAttr3,\n        cardName,\n        cardDescription,\n        cardImage\n      } = this.state;\n      const cardInputs = !(cardName === '' || cardDescription === '' || cardImage === '');\n      const cardMax = +cardAttr1 + +cardAttr2 + +cardAttr3 <= MAX_SUM;\n      const minOrMax1 = +cardAttr1 >= MIN_VALUE && +cardAttr1 <= MAX_VALUE;\n      const minOrMax2 = +cardAttr2 >= MIN_VALUE && +cardAttr2 <= MAX_VALUE;\n      const minOrMax3 = +cardAttr3 >= MIN_VALUE && +cardAttr3 <= MAX_VALUE;\n      isValid = cardInputs && cardMax && minOrMax1 && minOrMax2 && minOrMax3;\n      this.setState({\n        isSaveButtonDisabled: !isValid\n      });\n    };\n\n    this.saveCard = () => {\n      const savedCard = { ...this.state\n      }; // cria a cópia do estado e salva num array\n\n      if (savedCard.cardTrunfo === true) {\n        // verifica se a carta é Super Trunfo\n        this.setState({\n          hasTrunfo: true // se for, o state 'hasTrunfo' passa a ser true\n\n        });\n      }\n\n      this.setState(prevState => ({\n        cardName: '',\n        cardDescription: '',\n        cardAttr1: '0',\n        cardAttr2: '0',\n        cardAttr3: '0',\n        cardImage: '',\n        cardRare: 'normal',\n        cardTrunfo: false,\n        isSaveButtonDisabled: true,\n        cardList: [...prevState.cardList, savedCard],\n        // recupera a lista anterior com o '...prevState.cardList' e adiciona a carta que foi criada\n        onSaveButtonClick: this.saveCard,\n        filterName: '',\n        filterRare: 'todas',\n        filterTrunfo: false\n      }));\n    };\n\n    this.deleteCard = (card, cardTrunfo) => {\n      const {\n        cardList\n      } = this.state;\n      const newList = cardList.filter(cardSelected => cardSelected !== card);\n\n      if (cardTrunfo) {\n        this.setState({\n          hasTrunfo: false,\n          cardList: newList\n        });\n      } else {\n        this.setState({\n          cardList: newList\n        });\n      }\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      cardName: '',\n      cardDescription: '',\n      cardAttr1: '0',\n      cardAttr2: '0',\n      cardAttr3: '0',\n      cardImage: '',\n      cardRare: 'normal',\n      cardTrunfo: false,\n      isSaveButtonDisabled: true,\n      cardList: [],\n      // inicia no estado a lista de cartas para usarmos nas funções de salvar a carta\n      onSaveButtonClick: this.saveCard,\n      hasTrunfo: false,\n      filterName: '',\n      filterRare: 'todas',\n      filterTrunfo: false\n    };\n    /* this.setState((estadoAnterior, props) => novoEstado) */\n  }\n\n  handleChange(_ref) {\n    let {\n      target\n    } = _ref;\n\n    /* console.log(target); */\n    const {\n      name\n    } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    /* console.log({ [name]: value }); */\n\n    this.setState(() => ({\n      [name]: value\n    }), this.handleSaveButton); // após atualizar o state, a função é chamada, para verificar se o botão salvar deve ficar ou não ativo;\n  }\n\n  // função feita com base no PR da Kerli Schroeder\n  render() {\n    /* console.log('renderizou'); */\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(Form, { ...this.state,\n        onInputChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, { ...this.state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {\n        onInputChange: this.handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterList, { ...this.state,\n        deleteCard: this.deleteCard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/lorismilloni/Repos/top_trumps/src/App.js"],"names":["React","Form","Card","Filter","FilterList","App","Component","constructor","handleSaveButton","isValid","MAX_SUM","MAX_VALUE","MIN_VALUE","cardAttr1","cardAttr2","cardAttr3","cardName","cardDescription","cardImage","state","cardInputs","cardMax","minOrMax1","minOrMax2","minOrMax3","setState","isSaveButtonDisabled","saveCard","savedCard","cardTrunfo","hasTrunfo","prevState","cardRare","cardList","onSaveButtonClick","filterName","filterRare","filterTrunfo","deleteCard","card","newList","filter","cardSelected","handleChange","bind","target","name","value","type","checked","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Form from './components/Form';\nimport Card from './components/Card';\nimport Filter from './components/Filter';\nimport FilterList from './components/FilterList';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      cardName: '',\n      cardDescription: '',\n      cardAttr1: '0',\n      cardAttr2: '0',\n      cardAttr3: '0',\n      cardImage: '',\n      cardRare: 'normal',\n      cardTrunfo: false,\n      isSaveButtonDisabled: true,\n      cardList: [],\n      // inicia no estado a lista de cartas para usarmos nas funções de salvar a carta\n      onSaveButtonClick: this.saveCard,\n      hasTrunfo: false,\n      filterName: '',\n      filterRare: 'todas',\n      filterTrunfo: false,\n    };\n    /* this.setState((estadoAnterior, props) => novoEstado) */\n  }\n\n  handleChange({ target }) {\n    /* console.log(target); */\n    const { name } = target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    /* console.log({ [name]: value }); */\n    this.setState(() => ({\n      [name]: value,\n    }), this.handleSaveButton);\n    // após atualizar o state, a função é chamada, para verificar se o botão salvar deve ficar ou não ativo;\n  }\n\n  handleSaveButton = () => {\n    let isValid = true;\n    const MAX_SUM = 210;\n    const MAX_VALUE = 90;\n    const MIN_VALUE = 0;\n\n    const {\n      cardAttr1,\n      cardAttr2,\n      cardAttr3,\n      cardName,\n      cardDescription,\n      cardImage,\n    } = this.state;\n\n    const cardInputs = !(cardName === '' || cardDescription === '' || cardImage === '');\n    const cardMax = (((+cardAttr1) + (+cardAttr2) + (+cardAttr3)) <= MAX_SUM);\n    const minOrMax1 = ((+cardAttr1 >= MIN_VALUE) && (+cardAttr1 <= MAX_VALUE));\n    const minOrMax2 = ((+cardAttr2 >= MIN_VALUE) && (+cardAttr2 <= MAX_VALUE));\n    const minOrMax3 = ((+cardAttr3 >= MIN_VALUE) && (+cardAttr3 <= MAX_VALUE));\n\n    isValid = cardInputs && cardMax && minOrMax1 && minOrMax2 && minOrMax3;\n\n    this.setState({ isSaveButtonDisabled: !isValid });\n  }\n\n  saveCard = () => {\n    const savedCard = { ...this.state };\n    // cria a cópia do estado e salva num array\n    if (savedCard.cardTrunfo === true) {\n      // verifica se a carta é Super Trunfo\n      this.setState({\n        hasTrunfo: true,\n        // se for, o state 'hasTrunfo' passa a ser true\n      });\n    }\n    this.setState((prevState) => ({\n      cardName: '',\n      cardDescription: '',\n      cardAttr1: '0',\n      cardAttr2: '0',\n      cardAttr3: '0',\n      cardImage: '',\n      cardRare: 'normal',\n      cardTrunfo: false,\n      isSaveButtonDisabled: true,\n      cardList: [...prevState.cardList, savedCard],\n      // recupera a lista anterior com o '...prevState.cardList' e adiciona a carta que foi criada\n      onSaveButtonClick: this.saveCard,\n      filterName: '',\n      filterRare: 'todas',\n      filterTrunfo: false,\n    }));\n  }\n  // saveCard adicionados como o requisito do Yuri Carvalho\n\n  deleteCard = (card, cardTrunfo) => {\n    const { cardList } = this.state;\n    const newList = cardList.filter((cardSelected) => cardSelected !== card);\n    if (cardTrunfo) {\n      this.setState({\n        hasTrunfo: false,\n        cardList: newList,\n      });\n    } else {\n      this.setState({\n        cardList: newList,\n      });\n    }\n  }\n  // função feita com base no PR da Kerli Schroeder\n\n  render() {\n    /* console.log('renderizou'); */\n    return (\n      <main>\n        <Form\n          { ...this.state }\n          onInputChange={ this.handleChange }\n        />\n        <Card { ...this.state } />\n        <Filter onInputChange={ this.handleChange } />\n        <FilterList { ...this.state } deleteCard={ this.deleteCard } />\n      </main>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}